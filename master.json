{
  "Description":"Automate provisioning of CodeBuild with CodePipeline, CodeCommit, and CodeDeploy. **WARNING** This template creates one or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "AWSTemplateFormatVersion":"2010-09-09",
  "Parameters":{
    "Repo":{
      "Type":"String",
      "Description":"The name of the dromedary repository, not the URL",
      "Default":"workspace"
    },
    "GitHubToken":{
      "NoEcho":"true",
      "Type":"String",
      "Description":"Secret. OAuthToken with access to Repo. Long string of characters and digits. Go to https://github.com/settings/tokens"
    },
    "GitHubUser":{
      "Type":"String",
      "Description":"GitHub UserName. This username must have access to the GitHubToken.",
      "Default":"frc9"
    },
    "EmailAddress":{
      "Description":"Email Address for sending SNS notifications for CodeCommit",
      "Type":"String",
      "Default":"fcandela@amazon.com"
    },
    "TagKey":{
      "Type":"String",
      "Default":"Name",
      "Description":"The tag name that is associated with EC2 instances on which CodeDeploy agent is installed"
    },
    "TagValue":{
      "Description":"The tag value that identifies this as a target for deployments.",
      "Type":"String",
      "Default":"CodeDeployEC2Tag",
      "AllowedPattern":"[\\x20-\\x7E]*",
      "ConstraintDescription":"Can contain only ASCII characters."
    },
    "MyApp":{
      "Type":"String",
      "Default":"workspace"
    },
    "Branch":{
      "Type":"String",
      "Description":"Branch to use from Repo. Only the Name. not the URL",
      "Default":"master"
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation" : {
      "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },
  "Metadata":{
  },
  "Resources":{
    "CodeBuildRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "codebuild.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"codebuild-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":"*",
                  "Resource":"*"
                }
              ],
              "Version":"2012-10-17"
            }
          }
        ]
      }
    },
    "CodePipelineRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"codepipeline-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Action":[
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:UploadArchive",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:CancelUploadArchive",
                    "codebuild:*"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetBucketVersioning"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "s3:PutObject"
                  ],
                  "Resource":[
                    "arn:aws:s3:::codepipeline*",
                    "arn:aws:s3:::elasticbeanstalk*"
                  ],
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:RegisterApplicationRevision"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "elasticbeanstalk:*",
                    "ec2:*",
                    "elasticloadbalancing:*",
                    "autoscaling:*",
                    "cloudwatch:*",
                    "s3:*",
                    "sns:*",
                    "cloudformation:*",
                    "rds:*",
                    "sqs:*",
                    "ecs:*",
                    "iam:PassRole"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "lambda:InvokeFunction",
                    "lambda:ListFunctions"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                }
              ],
              "Version":"2012-10-17"
            }
          }
        ]
      }
    },
    "CodeBuildProject":{
      "Type":"AWS::CodeBuild::Project",
      "DependsOn":"CodeBuildRole",
      "Properties":{
        "Name":{
          "Ref":"AWS::StackName"
        },
        "Description":"Build riskcast app",
        "ServiceRole":{
          "Fn::GetAtt":[
            "CodeBuildRole",
            "Arn"
          ]
        },
        "Artifacts":{
          "Type":"S3",
          "Location":"fcandela-workshop",
          "Name":"workshop.zip"
        },
        "Environment":{
          "Type":"LINUX_CONTAINER",
          "ComputeType":"BUILD_GENERAL1_SMALL",
          "Image":"aws/codebuild/nodejs:4.3.2"
        },
        "Source":{
          "Type":"GITHUB",
          "Auth":{
            "Type":"OAUTH"
          },
          "Location":"https://github.com/frc9/workspace"
        },
        "TimeoutInMinutes":10,
        "Tags":[
          {
            "Key":"Owner",
            "Value":"riskcast"
          }
        ]
      }
    },
    "MySNSTopic":{
      "Type":"AWS::SNS::Topic",
      "Properties":{
        "Subscription":[
          {
            "Endpoint":{
              "Ref":"EmailAddress"
            },
            "Protocol":"email"
          }
        ]
      }
    },
    "MyApplication":{
      "Type":"AWS::CodeDeploy::Application"
    },
    "MyDeploymentGroup":{
      "Type":"AWS::CodeDeploy::DeploymentGroup",
      "DependsOn":"MyApplication",
      "Properties":{
        "ApplicationName":{
          "Ref":"MyApplication"
        },
        "DeploymentConfigName":"CodeDeployDefault.AllAtOnce",
        "Ec2TagFilters":[
          {
            "Key":{
              "Ref":"TagKey"
            },
            "Value":{
              "Ref":"TagValue"
            },
            "Type":"KEY_AND_VALUE"
          }
        ],
        "ServiceRoleArn":{
          "Fn::GetAtt":[
            "CodeDeployTrustRole",
            "Arn"
          ]
        }
      }
    },
    "CodePipelineStack":{
      "Type":"AWS::CodePipeline::Pipeline",
      "DependsOn":"CodeBuildProject",
      "Properties":{
        "RoleArn":{
          "Fn::Join":[
            "",
            [
              "arn:aws:iam::",
              {
                "Ref":"AWS::AccountId"
              },
              ":role/",
              {
                "Ref":"CodePipelineRole"
              }
            ]
          ]
        },
        "Stages":[
          {
            "Name":"Source",
            "Actions":[
              {
                "InputArtifacts":[

                ],
                "Name":"Source",
                "ActionTypeId":{
                  "Category":"Source",
                  "Owner":"ThirdParty",
                  "Version":"1",
                  "Provider":"GitHub"
                },
                "OutputArtifacts":[
                  {
                    "Name":"MyApp"
                  }
                ],
                "Configuration":{
                  "Owner":{
                    "Ref":"GitHubUser"
                  },
                  "Repo":{
                    "Ref":"Repo"
                  },
                  "Branch":{
                    "Ref":"Branch"
                  },
                  "OAuthToken":{
                    "Ref":"GitHubToken"
                  }
                },
                "RunOrder":1
              }
            ]
          },
          {
            "Name":"Build",
            "Actions":[
              {
                "InputArtifacts":[
                  {
                    "Name":"MyApp"
                  }
                ],
                "Name":"Build",
                "ActionTypeId":{
                  "Category":"Build",
                  "Owner":"AWS",
                  "Version":"1",
                  "Provider":"CodeBuild"
                },
                "OutputArtifacts":[
                  {
                    "Name":"MyAppBuild"
                  }
                ],
                "Configuration":{
                  "ProjectName":{
                    "Ref":"CodeBuildProject"
                  }
                },
                "RunOrder":1
              }
            ]
          },
          {
            "Name":"Deploy",
            "Actions":[
              {
                "InputArtifacts":[
                  {
                    "Name":"MyAppBuild"
                  }
                ],
                "Name":"DemoFleet",
                "ActionTypeId":{
                  "Category":"Deploy",
                  "Owner":"AWS",
                  "Version":"1",
                  "Provider":"CodeDeploy"
                },
                "OutputArtifacts":[

                ],
                "Configuration":{
                  "ApplicationName":{
                    "Ref":"MyApplication"
                  },
                  "DeploymentGroupName":{
                    "Ref":"MyDeploymentGroup"
                  }
                },
                "RunOrder":1
              }
            ]
          }
        ],
        "ArtifactStore":{
          "Type":"S3",
          "Location":{
            "Fn::Join":[
              "",
              [
                "codepipeline-",
                {
                  "Ref":"AWS::Region"
                },
                "-",
                {
                  "Ref":"AWS::AccountId"
                }
              ]
            ]
          }
        }
      }
    },
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : ["us-west-2a", "us-west-2b"],
        "VPCZoneIdentifier" : ["subnet-207abf57", "subnet-91fc5af4"],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "10",
        "DesiredCapacity" : "1",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "Tags":[{
          "Key":{"Ref":"TagKey"},
          "Value":{"Ref":"TagValue"},
          "PropagateAtLaunch" : "true"
          }]
      }
    },
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Prepare codedeploy ec2 instance",
        "AWS::CloudFormation::Init":{
          "services":{
            "sysvint":{
              "codedeploy-agent":{
                "enabled":"true",
                "ensureRunning":"true"
              }
            }
          }
        }
      },
      "Properties" : {
        "AssociatePublicIpAddress" : "true",
        "ImageId" : "ami-adb539cd",
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName"        : { "Ref" : "KeyName" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile":{
          "Ref":"InstanceRoleInstanceProfile"
        },
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -ex\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum install -y aws-cli\n",
                "# Helper function.\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the AWS CodeDeploy Agent.\n",
                "cd /home/ec2-user/\n",
                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                "'\n"
              ]
            ]
          }
        },
      }
    },
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone" : "true",
        "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ],
        "Subnets" : ["subnet-207abf57", "subnet-91fc5af4"],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "25"
        }
      }
    },
    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access on port 80",
        "VpcId" : "vpc-85a268e0",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ],
        "SecurityGroupEgress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access and SSH access",
        "VpcId" : "vpc-85a268e0",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" } }
        ]
      }
    },
    "CodeDeployTrustRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Sid":"1",
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com"
                ]
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Path":"/"
      }
    },
    "CodeDeployRolePolicies":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"CodeDeployPolicy",
        "PolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Resource":[
                "*"
              ],
              "Action":[
                "ec2:Describe*"
              ]
            },
            {
              "Effect":"Allow",
              "Resource":[
                "*"
              ],
              "Action":[
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            }
          ]
        },
        "Roles":[
          {
            "Ref":"CodeDeployTrustRole"
          }
        ]
      }
    },
    "InstanceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/"
      }
    },
    "InstanceRolePolicies":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"InstanceRole",
        "PolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Action":[
                "ec2:*",
                "codedeploy:*",
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*"
              ],
              "Resource":"*"
            }
          ]
        },
        "Roles":[
          {
            "Ref":"InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"InstanceRole"
          }
        ]
      }
    },
  },
  "Outputs":{
    "CodeBuildURL":{
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://console.aws.amazon.com/codebuild/home?region=",
            {
              "Ref":"AWS::Region"
            },
            "#/projects/",
            {
              "Ref":"CodeBuildProject"
            },
            "/view"
          ]
        ]
      },
      "Description":"CodeBuild URL"
    },
    "CodeCommitURL":{
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://console.aws.amazon.com/codecommit/home?region=",
            {
              "Ref":"AWS::Region"
            },
            "#/repository/",
            {
              "Ref":"AWS::StackName"
            },
            "/browse/HEAD/--/"
          ]
        ]
      },
      "Description":"Git Repository URL"
    },
    "CodeDeployURL":{
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://console.aws.amazon.com/codedeploy/home?region=",
            {
              "Ref":"AWS::Region"
            },
            "#/deployments/"
          ]
        ]
      },
      "Description":"CodeDeploy URL"
    },
    "CodePipelineURL":{
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://console.aws.amazon.com/codepipeline/home?region=",
            {
              "Ref":"AWS::Region"
            },
            "#/view/",
            {
              "Ref":"CodePipelineStack"
            }
          ]
        ]
      },
      "Description":"CodePipeline URL"
    },
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    }
  }
}
